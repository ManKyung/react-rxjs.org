(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var o=n(2),a=n(6),r=(n(0),n(83)),i={title:"Todos"},c={unversionedId:"tutorial/todos",id:"tutorial/todos",isDocsHomePage:!1,title:"Todos",description:"This section assumes you have installed @react-rxjs/core and React.",source:"@site/docs/tutorial/todos.md",slug:"/tutorial/todos",permalink:"/react-rxjs.org/docs/tutorial/todos",editUrl:"https://github.com/re-rxjs/react-rxjs.org/tree/master/docs/tutorial/todos.md",version:"current",sidebar:"someSidebar",previous:{title:"Github Issues example",permalink:"/react-rxjs.org/docs/tutorial/github-issues"},next:{title:"bind(observable)",permalink:"/react-rxjs.org/docs/api/core/bind"}},s=[{value:"Capturing user input",id:"capturing-user-input",children:[]},{value:"Creating a stream for all the events",id:"creating-a-stream-for-all-the-events",children:[]},{value:"Creating a stream for each todo",id:"creating-a-stream-for-each-todo",children:[]}],l={rightToc:s};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(o.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This section assumes you have installed ",Object(r.b)("inlineCode",{parentName:"p"},"@react-rxjs/core")," and React.\nSee the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/getting-started"}),"Getting Started")," page for how to get started with\nReact-RxJS. Also, it's probably a good idea to have a look at the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/core-concepts"}),"Core Concepts"),"\npage before starting this tutorial."),Object(r.b)("p",null,"In this tutorial, we'll be building a simple todo-list application. Our app will\nbe able to do the following:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Add todo items"),Object(r.b)("li",{parentName:"ul"},"Edit todo items"),Object(r.b)("li",{parentName:"ul"},"Delete todo items"),Object(r.b)("li",{parentName:"ul"},"Filter todo items"),Object(r.b)("li",{parentName:"ul"},"Display useful stats")),Object(r.b)("p",null,"Along the way, we'll also introduce the ",Object(r.b)("inlineCode",{parentName:"p"},"@react-rxjs/utils")," package, which is a set\nof handful utilities that can come very handy when creating react apps."),Object(r.b)("h2",{id:"capturing-user-input"},"Capturing user input"),Object(r.b)("p",null,"The first thing that we have to do is to capture the input from the user (yes,\nusers are also producers of events!). Let's create some ",Object(r.b)("inlineCode",{parentName:"p"},"Subject"),"s for this, and\nsome functions that wrap the subjects, which we can use from our components:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'import { Subject } from "rxjs"\n\nconst newTodo$ = new Subject<string>()\nexport const onNewTodo = (text: string) => text && newTodo.next(text)\n\nconst editTodo$ = new Subject<{ id: number; text: string }>()\nexport const onEditTodo = (id: number, text: string) =>\n  editTodo$.next({ id, text })\n\nconst toggleTodo$ = new Subject<number>()\nexport const onToggleTodo = (id: number) => toggleTodo$.next(id)\n\nconst deleteTodo$ = new Subject<number>()\nexport const onDeleteTodo = (id: number) => deleteTodo.next(id)\n')),Object(r.b)("h2",{id:"creating-a-stream-for-all-the-events"},"Creating a stream for all the events"),Object(r.b)("p",null,"It would be very convenient to have a merged stream with all those events. However,\nif we did a traditional ",Object(r.b)("inlineCode",{parentName:"p"},"merge"),", then it would be very challenging to know where\neach event came from."),Object(r.b)("p",null,"That's why we expose the ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"../api/utils/mergeWithKey"}),Object(r.b)("inlineCode",{parentName:"a"},"mergeWithKey"))," operator from the\n",Object(r.b)("inlineCode",{parentName:"p"},"@react-rxjs/utils")," package. Let's use it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"const todoActions$ = mergeWithKey({\n  add: newTodo$.pipe(map(text, id) => ({ id, text })),\n  edit: editTodo$,\n  toggle: toggleTodo$.pipe(map(id => ({ id }))),\n  delete: deleteTodo$.pipe(map(id => ({ id })))\n})\n")),Object(r.b)("p",null,"Which is the equivalent of doing this:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),'const todoActions$ = merge(\n  newTodo$.pipe(map(text, id) => ({\n    type: "add" as const\n    payload: { id, text },\n  })),\n  editTodo$.pipe(map(payload => ({\n    type: "edit" as const,\n    payload,\n  }))),\n  toggleTodo$.pipe(map(id => ({\n    type: "toggle" as const,\n    payload: { id },\n  }))),\n  deleteTodo$.pipe(map(id => ({\n    type: "delete" as const,\n    payload: { id },\n  }))),\n)\n')),Object(r.b)("h2",{id:"creating-a-stream-for-each-todo"},"Creating a stream for each todo"),Object(r.b)("p",null,"Now that we have a stream for all the events, let's create a stream for\neach todo. We will be using another operator from ",Object(r.b)("inlineCode",{parentName:"p"},"@react-rxjs/utils")," for that,\nthe ",Object(r.b)("a",Object(o.a)({parentName:"p"},{href:"../api/utils/split"}),Object(r.b)("inlineCode",{parentName:"a"},"split")," operator")," operator:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),'type Todo = { id: number, text: string, done: boolean }\n\nconst todos$: Observable<GroupedObservable<number, Todo>> = todoActions$.pipe(\n  split(\n    event => event.payload.id,\n    (event$, id) => event.pipe(\n      takeWhile(event => event.type !== \'delete\'),\n      scan(\n        (state, action) => {\n          switch (action.type) {\n            case "add":\n            case "edit":\n              return { ...state, text: action.payload.text }\n            case "toggle":\n              return { ...state, done: !state.done},\n            default:\n              return state\n          }\n        },\n        { id, text: "", done: false }\n      )\n    )\n  )\n)\n')),Object(r.b)("h1",{id:"collecting-the-groupedobservables"},"Collecting the GroupedObservables"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"split")," returns an Observable of GroupedObservables. However, it would be a lot\nmore convenient to have an Observable of a ",Object(r.b)("inlineCode",{parentName:"p"},"Map<number, Todo>"),", and that's\nexactly what the ",Object(r.b)("inlineCode",{parentName:"p"},"collectValues")," operator does:"),Object(r.b)("pre",null,Object(r.b)("code",Object(o.a)({parentName:"pre"},{className:"language-ts"}),"const todosMap$: Observable<Map<number, Todo>> = todos$.pipe(collectValues())\n")))}p.isMDXComponent=!0},83:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var o=n(0),a=n.n(o);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,m=d["".concat(i,".").concat(u)]||d[u]||b[u]||r;return n?a.a.createElement(m,c(c({ref:t},l),{},{components:n})):a.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);